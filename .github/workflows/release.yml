name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get dependencies
      run: go mod download

    - name: Build CLI
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        CLI_OUTPUT=demojibake-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          CLI_OUTPUT=${CLI_OUTPUT}.exe
        fi
        go build -ldflags "-s -w -X main.version=${GITHUB_REF#refs/tags/}" -o ${CLI_OUTPUT} ./cmd/demojibake

    - name: Build GUI
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        GUI_OUTPUT=demojibake-gui-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          GUI_OUTPUT=${GUI_OUTPUT}.exe
        fi
        go build -ldflags "-s -w -X main.version=${GITHUB_REF#refs/tags/}" -o ${GUI_OUTPUT} ./cmd/demojibake-gui

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          demojibake-*
          !demojibake-gui-*

    - name: Upload GUI artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gui-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: demojibake-gui-*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for dir in binaries-* gui-binaries-*; do
          if [ -d "$dir" ]; then
            for file in "$dir"/*; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                curl \
                  -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")"
              fi
            done
          fi
        done

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          demojibake:latest
          demojibake:${{ github.ref_name }}
        platforms: linux/amd64,linux/arm64